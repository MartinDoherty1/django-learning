name: Django CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    services:
      postgres_main:
        image: postgres
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USERNAME }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: djangotest
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready 
          --health-interval 10s 
          --health-timeout 5s 
          --health-retries 5

      elasticsearch_main:
        image: docker.elastic.co/elasticsearch/elasticsearch:8.12.0
        env:
          discovery.type: single-node
          ELASTIC_PASSWORD: test1231
        ports:
          - 9200:9200
        options: >-
          --health-cmd="docker cp es01:/usr/share/elasticsearch/config/certs/http_ca.crt . && curl --cacert http_ca.crt -u elastic:$ELASTIC_PASSWORD https://localhost:9200"
          --health-interval 10s 
          --health-timeout 10s 
          --health-retries 10

    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.12.1]

    env:
      POSTGRES_HOST: localhost
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_USERNAME: ${{ secrets.POSTGRES_USERNAME }}

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Run Tests
      run: | 
        CONTAINER_ID=$(docker-compose ps -q elasticsearch_main)
        echo "$CONTAINER_ID"
        docker cp CONTAINER_ID:/usr/share/elasticsearch/config/certs/http_ca.crt .
        python manage.py test
